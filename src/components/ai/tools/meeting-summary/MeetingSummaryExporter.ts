
/**
 * Utility functions for exporting meeting summaries
 */

import { formatTime } from '@/utils/audio/audioProcessing';
import html2pdf from 'html2pdf.js';

export interface MeetingSummaryPDFOptions {
  title?: string;
  companyName?: string;
  companyLogo?: string;
  includeFooter?: boolean;
}

/**
 * Exports the meeting summary as a PDF file
 * @param summary The HTML summary content
 * @param duration The meeting duration in seconds
 * @param location Optional meeting location
 * @param attendees Optional list of meeting attendees
 * @param options Additional PDF options
 */
export const exportMeetingSummaryAsPDF = async (
  summary: string,
  duration: number,
  location?: string | null,
  attendees?: string[] | null,
  options: MeetingSummaryPDFOptions = {}
): Promise<void> => {
  // Create PDF content with styling
  const today = new Date();
  const dateString = today.toLocaleDateString();
  const timeString = today.toLocaleTimeString();
  
  const title = options.title || 'Meeting Summary';
  const companyName = options.companyName || 'WAKTI';
  const includeFooter = options.includeFooter !== false;

  let pdfContent = `
    <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <div>
          <h1 style="color: #333; margin: 0;">${title}</h1>
          <p style="color: #666; margin: 5px 0;">Generated on ${dateString} at ${timeString}</p>
        </div>
        ${options.companyLogo ? `<img src="${options.companyLogo}" alt="${companyName} Logo" style="height: 60px;">` : ''}
      </div>
      
      <div style="background-color: #f5f5f5; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
        <div style="display: flex; flex-wrap: wrap; gap: 15px;">
          <div style="flex: 1; min-width: 200px;">
            <p style="margin: 5px 0; font-weight: bold;">Duration:</p>
            <p style="margin: 5px 0;">${formatTime(duration)}</p>
          </div>
          
          ${location ? `
          <div style="flex: 1; min-width: 200px;">
            <p style="margin: 5px 0; font-weight: bold;">Location:</p>
            <p style="margin: 5px 0;">${location}</p>
          </div>` : ''}
        </div>
        
        ${attendees && attendees.length > 0 ? `
        <div style="margin-top: 15px;">
          <p style="margin: 5px 0; font-weight: bold;">Attendees:</p>
          <ul style="margin: 5px 0; padding-left: 20px;">
            ${attendees.map(attendee => `<li>${attendee}</li>`).join('')}
          </ul>
        </div>` : ''}
      </div>
      
      <div style="line-height: 1.6;">
        ${summary}
      </div>
      
      ${includeFooter ? `
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #999; font-size: 12px; text-align: center;">
        <p>Generated by ${companyName} Meeting Summary Tool</p>
      </div>` : ''}
    </div>
  `;

  // Configure PDF options
  const pdfOptions = {
    margin: [15, 15, 15, 15],
    filename: `meeting_summary_${today.toISOString().split('T')[0]}.pdf`,
    image: { type: 'jpeg', quality: 0.98 },
    html2canvas: { scale: 2, useCORS: true },
    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
  };
  
  // Generate and download the PDF
  const element = document.createElement('div');
  element.innerHTML = pdfContent;
  document.body.appendChild(element);
  
  try {
    await html2pdf().from(element).set(pdfOptions).save();
  } finally {
    document.body.removeChild(element);
  }
};

/**
 * Creates a download link for audio data
 * @param audioData Audio blob
 * @param filename Filename for the download
 */
export const downloadAudioFile = (audioData: Blob, filename = 'meeting_recording.webm'): void => {
  const url = URL.createObjectURL(audioData);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(() => URL.revokeObjectURL(url), 100);
};
